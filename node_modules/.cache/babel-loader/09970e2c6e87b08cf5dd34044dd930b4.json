{"ast":null,"code":"import { CREATE_CONTACT, DELETE_CONTACT, GET_CONTACT, UPDATE_CONTACT, SELECT_CONTACT, CLEAR_CONTACT, DELETE_SELECTED_CONTACT } from \"../../../utils/types\";\nconst initialState = {\n  contacts: [{\n    id: 1,\n    name: \"Abhishek Chaturvedi \",\n    username: \"abhishek.chaturvedi\",\n    email: \"abhishek.chaturvedi@netccecntric.biz\",\n    phone: \"9999999999\"\n  }, {\n    id: 2,\n    name: \"Ramba Singhania \",\n    username: \"desouza.rambo\",\n    email: \"rambo.desouza@abccomp.biz\",\n    phone: \"876543572\"\n  }, {\n    id: 3,\n    name: \"Terry Jom\",\n    username: \"terry.jom\",\n    email: \"terry.jom@abccomp.biz\",\n    phone: \"9999999999\"\n  }, {\n    id: 4,\n    name: \"Vikas Shetty\",\n    username: \"vikas.shetty\",\n    email: \"vikas.shetty@abccomp.biz\",\n    phone: \"656765568\"\n  }],\n  contact: null,\n  selectedContacts: []\n};\n\nconst contactsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_CONTACT:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts]\n      };\n\n    case GET_CONTACT:\n      let arr = state.contacts.filter(contact => contact.id == action.payload);\n      arr = arr.values();\n\n      for (let val of arr) {\n        arr = val;\n      }\n\n      return { ...state,\n        contact: arr\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id == action.payload.id ? action.payload : contact)\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id != action.payload)\n      };\n\n    case SELECT_CONTACT:\n      return { ...state,\n        selectedContacts: action.payload\n      };\n\n    case CLEAR_CONTACT:\n      return { ...state,\n        selectedContacts: []\n      };\n\n    case DELETE_SELECTED_CONTACT:\n      return { ...state,\n        contacts: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default contactsReducer;","map":{"version":3,"sources":["/Users/abhishek/Documents/redux-react-bootstrap-crud/redux-react-bootstrap-crud/src/redux/reducer/contactsReducer/ContactsReducer.js"],"names":["CREATE_CONTACT","DELETE_CONTACT","GET_CONTACT","UPDATE_CONTACT","SELECT_CONTACT","CLEAR_CONTACT","DELETE_SELECTED_CONTACT","initialState","contacts","id","name","username","email","phone","contact","selectedContacts","contactsReducer","state","action","type","payload","arr","filter","values","val","map"],"mappings":"AAAA,SACEA,cADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,aANF,EAOEC,uBAPF,QAQO,sBARP;AASA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,QAAQ,EAAE,qBAHZ;AAIEC,IAAAA,KAAK,EAAE,sCAJT;AAKEC,IAAAA,KAAK,EAAE;AALT,GADQ,EAQR;AACEJ,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,QAAQ,EAAE,eAHZ;AAIEC,IAAAA,KAAK,EAAE,2BAJT;AAKEC,IAAAA,KAAK,EAAE;AALT,GARQ,EAeR;AACEJ,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,QAAQ,EAAE,WAHZ;AAIEC,IAAAA,KAAK,EAAE,uBAJT;AAKEC,IAAAA,KAAK,EAAE;AALT,GAfQ,EAsBR;AACEJ,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,QAAQ,EAAE,cAHZ;AAIEC,IAAAA,KAAK,EAAE,0BAJT;AAKEC,IAAAA,KAAK,EAAE;AALT,GAtBQ,CADS;AA+BnBC,EAAAA,OAAO,EAAE,IA/BU;AAgCnBC,EAAAA,gBAAgB,EAAE;AAhCC,CAArB;;AAmCA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKnB,cAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELT,QAAAA,QAAQ,EAAE,CAACU,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACT,QAA1B;AAFL,OAAP;;AAIF,SAAKN,WAAL;AACE,UAAImB,GAAG,GAAGJ,KAAK,CAACT,QAAN,CAAec,MAAf,CACPR,OAAD,IAAaA,OAAO,CAACL,EAAR,IAAcS,MAAM,CAACE,OAD1B,CAAV;AAGAC,MAAAA,GAAG,GAAGA,GAAG,CAACE,MAAJ,EAAN;;AACA,WAAK,IAAIC,GAAT,IAAgBH,GAAhB,EAAqB;AACnBA,QAAAA,GAAG,GAAGG,GAAN;AACD;;AACD,aAAO,EACL,GAAGP,KADE;AAELH,QAAAA,OAAO,EAAEO;AAFJ,OAAP;;AAIF,SAAKlB,cAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELT,QAAAA,QAAQ,EAAES,KAAK,CAACT,QAAN,CAAeiB,GAAf,CAAoBX,OAAD,IAC3BA,OAAO,CAACL,EAAR,IAAcS,MAAM,CAACE,OAAP,CAAeX,EAA7B,GAAkCS,MAAM,CAACE,OAAzC,GAAmDN,OAD3C;AAFL,OAAP;;AAMF,SAAKb,cAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELT,QAAAA,QAAQ,EAAES,KAAK,CAACT,QAAN,CAAec,MAAf,CACPR,OAAD,IAAaA,OAAO,CAACL,EAAR,IAAcS,MAAM,CAACE,OAD1B;AAFL,OAAP;;AAMF,SAAKhB,cAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELF,QAAAA,gBAAgB,EAAEG,MAAM,CAACE;AAFpB,OAAP;;AAIF,SAAKf,aAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELF,QAAAA,gBAAgB,EAAE;AAFb,OAAP;;AAIF,SAAKT,uBAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELT,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF;AACE,aAAOS,KAAP;AAhDJ;AAkDD,CAnDD;;AAqDA,eAAeD,eAAf","sourcesContent":["import {\n  CREATE_CONTACT,\n  DELETE_CONTACT,\n  GET_CONTACT,\n  UPDATE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"../../../utils/types\";\nconst initialState = {\n  contacts: [\n    {\n      id: 1,\n      name: \"Abhishek Chaturvedi \",\n      username: \"abhishek.chaturvedi\",\n      email: \"abhishek.chaturvedi@netccecntric.biz\",\n      phone: \"9999999999\",\n    },\n    {\n      id: 2,\n      name: \"Ramba Singhania \",\n      username: \"desouza.rambo\",\n      email: \"rambo.desouza@abccomp.biz\",\n      phone: \"876543572\",\n    },\n    {\n      id: 3,\n      name: \"Terry Jom\",\n      username: \"terry.jom\",\n      email: \"terry.jom@abccomp.biz\",\n      phone: \"9999999999\",\n    },\n    {\n      id: 4,\n      name: \"Vikas Shetty\",\n      username: \"vikas.shetty\",\n      email: \"vikas.shetty@abccomp.biz\",\n      phone: \"656765568\",\n    },\n  ],\n  contact: null,\n  selectedContacts: [],\n};\n\nconst contactsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case GET_CONTACT:\n      let arr = state.contacts.filter(\n        (contact) => contact.id == action.payload\n      );\n      arr = arr.values();\n      for (let val of arr) {\n        arr = val;\n      }\n      return {\n        ...state,\n        contact: arr,\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id == action.payload.id ? action.payload : contact\n        ),\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id != action.payload\n        ),\n      };\n    case SELECT_CONTACT:\n      return {\n        ...state,\n        selectedContacts: action.payload,\n      };\n    case CLEAR_CONTACT:\n      return {\n        ...state,\n        selectedContacts: [],\n      };\n    case DELETE_SELECTED_CONTACT:\n      return {\n        ...state,\n        contacts: [],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default contactsReducer;\n"]},"metadata":{},"sourceType":"module"}